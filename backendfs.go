package main

import (
	"os"
	"time"
)

// Inode attributes
type Stat struct {
	Ino       uint64      // Inode number
	Mode      os.FileMode // File type and mode
	Nlink     uint32      // Number of hard links
	UID       uint32      // User ID of owner
	GID       uint32      // Group ID of owner
	Size      uint64      // Total size in bytes
	Blocks    uint64      // Number of blocks allocated
	BlockSize uint32      // Block size for filesystem I/O
	Atime     time.Time   // Time of last access
	Mtime     time.Time   // Time of last modification
	Ctime     time.Time   // Time of last status change
	Crtime    time.Time   // Time of creation
}

type Dirent struct {
	Ino  uint64      // Inode number
	Name string      // Name of entry
	Type os.FileMode // Type of file: mode & os.ModeType
}

// BackendFS is the filesystem interface for FUSE backend.
type BackendFS interface {
	// Stat returns a Stat (struct) describing attributes of an inode, or an
	// error, if any happens.
	Stat(ino uint64) (*Stat, error)

	// Open opens a file or a directory, returning an error if any happens.
	Open(ino uint64, flags int) error

	// Create creates a file in a directory and opens it, returning attributes
	// of inode of the created file, or an error (if any happens)
	Create(ino uint64, name string, flags int, mode os.FileMode) (*Stat, error)

	// Mkdir creates a directory in the filesystem
	Mkdir(ino uint64, name string, mode os.FileMode) (*Stat, error)

	// Rmdir deletes a directory, which must be empty
	Rmdir(ino uint64, name string) error

	// Unlink deletes a name and possibly the file it refers to
	Unlink(ino uint64, name string) error

	// Rename changes the name or location of a file or a directory
	// sIno is inode number of the old directory where lies the file being
	// renamed; sName is the old name of the file; dIno is the inode number
	// of the destination directory; dName is the new name specified
	Rename(sIno uint64, sName string, dIno uint64, dName string) error

	// Link makes a new name for a file. ino is the inode number of the file,
	// dIno is the inode number of the destination directory, dName is the
	// new name given.
	// Link will return attributes of the file on success.
	Link(ino uint64, dIno uint64, dName string) (*Stat, error)

	// Setattr sets attributes of a file or directory. 'attrs' contains
	// attributes that need to set and is always not empty.
	// Setattr will return the updated attributes on success.
	Setattr(ino uint64, attrs map[string]interface{}) (*Stat, error)

	// Lookup looks up an inode in a parent directory.
	Lookup(ino uint64, name string) (*Stat, error)

	// Readdir reads the contents of a directory and returns a slice of up to
	// n Dirent values, in directory order. The start position of reading is
	// specified by marker, which is generated by server during last call to
	// Readdir.
	// If marker is an empty string, Readdir reads the first n Dirent in a
	// directory
	//
	// If n <= 0, Readdir returns all the Dirent from the directory in a
	// single slice starting from position indicated by marker.
	//
	// The second value that Readdir returns is a new marker generated by server
	// for reading remaining Dirents. An empty string value indicates that no
	// more Dirents in the directory.
	Readdir(ino uint64, marker string, n int) ([]Dirent, string, error)

	// Read reads up to n bytes from the file identified by ino starting at a
	// specified byte offset. It returns a slice of bytes read and any error
	// encountered.
	//
	// If n <= 0, Read returns all bytes from a file starting at the
	// specified offset.
	// If n > 0, Read should return exactly n bytes except on EOF or error
	Read(ino uint64, offset int64, n int) ([]byte, error)

	// Write writes len(data) bytes to the file identified by ino starting at
	// a specified byte offset. It returns the number of bytes written and an
	// error, if any. It returns a non-nil error when data is not fully written
	Write(ino uint64, offset int64, data []byte) (int, error)

	// Fsync synchronizes file contents with the backend storage.
	//
	// If the datasync parameter is non-zero, only file data should be
	// synchronized, not metadata.
	Fsync(ino uint64, datasync uint32, dir bool) error

	// Flush will be called on each close() of an open file. It should be used
	// to implement flush-on-close semantics.
	Flush(ino uint64) error

	// Release will be called when the last reference to an open file is closed.
	// flags will contain the same flags as Open.
	// Under Linux, Release is called asynchronously with close() syscall;
	// the PID in the corresponding FUSE request is 0, which indicates that the
	// requester is the kernel instead of a user process.
	Release(ino uint64, flags int) error
}
